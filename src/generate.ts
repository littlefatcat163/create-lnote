import _ from 'lodash'
import CryptoJS from 'crypto-js'
import { encrypt, decrypt, encodeStr, decodeStr, createSecret } from './encDec'
import { randomRange, pcInfo } from './utils'

function createInlineSecret(str?: string) {
    const key =
        '6570893b08c40eb8171f0a9cb987d290e658c6ab21dd046ff8149879dc3d277c6e667069cc0a992326a58bf3e671df6fcbfdc0257de45aad8ad5d4b4dcc2f3311698140765193'
    const encrypted =
        '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'
    const arr = decryptData(encrypted, key) as string[]
    return createSecret(arr.join(`欧耶__${str}/${Date.now()}__#!@#$$%^&*()`))
}

/**
 * @description 加密数据
 *  - 1. 将数据转为JSON字符串
 *  - 2. encode 字符串
 *  - 3. 定制新密钥加密为 value，密钥字段名为 inlineSecret
 *  - 4. encode 加密过一次的数据
 *  - 5. 用最外层的key加密
 * @param {Object} data 需要加密的数据源
 * @param {string} secret 密钥
 * @returns {string} 密文
 */
export function encryptData(data: Object, secret: string): string {
    const inlineSecret = createInlineSecret(secret)
    const encrypted = {
        inlineSecret,
        value: encrypt(encodeStr(JSON.stringify(data)), inlineSecret),
    }
    return encrypt(encodeStr(JSON.stringify(encrypted)), secret)
}

/**
 * @description 解密数据
 *  - 1. 最外层解密获取 inlineSecret 和 value
 *  - 2. 解密value
 *  - 3. decode 和 JSON 格式化出 data
 * @param str
 * @param secret
 * @returns {Object} data
 */
export function decryptData(str: string, secret: string): any {
    try {
        const { inlineSecret, value } = JSON.parse(
            decodeStr(decrypt(str, secret))
        )
        const decrypted = JSON.parse(decodeStr(decrypt(value, inlineSecret)))
        return decrypted
    } catch (error) {
        return undefined
    }
}

export function generateSignature() {
    const key =
        '1c276db6c71e4ff4c0566a319453389543f914cbbd3892a56e67dd16ec19b3aefda96b5a628e66fef1502348c0a3ee3335c72c09418eba4779a46f456e61f3571698141784741'
    const encrypted =
        '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'
    const arr = decryptData(encrypted, key) as string[]
    return arr[0]
}

export function generateAdminAuthCode() {
    const key =
        'd73225d2ead6922e392610d641b5529d6eb18bcd5fb0489509561e26d967c794d196bba6f98ae187d4879a22df696a256b2a7e90fad1ffe8b30ad7ab1872fca61698150338972'
    const encrypted =
        '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'
    const arr = decryptData(encrypted, key) as string[]
    return arr[0]
}

export async function licenseKey() {
    const { serial } = await pcInfo()
    const signature = generateSignature()
    const hash = CryptoJS.SHA256(`${serial}@@0ooO..@${signature}`).toString()
    const chunks = hash.match(/.{1,5}/g) || []
    return chunks.join('-')
}

export function validateLicense(input?: string): Promise<boolean | string> {
    return new Promise((resolve, reject) => {
        const key =
            'b6c43db66924183321187cd47b99f2d409cd446cafd87a4d154c1479c2f8dd5b8234977f12565ca98df6c7f675783708acea99361c4161e2b67766ef8a3043e81698154294158'
        const encrypted =
            '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'
        const arr = decryptData(encrypted, key) as string[]
        if (_.isEmpty(input)) {
            reject(arr[0])
            return
        }
        setTimeout(async () => {
            const lic = await licenseKey()
            if (lic === input) {
                resolve(true)
            } else {
                reject(arr[1])
            }
        }, randomRange(1, 3) * 1000)
    })
}

export function validateAdmin(input?: string): Promise<boolean | string> {
    return new Promise((resolve, reject) => {
        const key =
            '71c36c8f5754c8a8e583de6703888d09bd804d265764d3e865e6d8ad9781214f05dc3f822663ab84db1949a5787c8c745b016e3630db15f0c847eb9a7eabadb81698154585973'
        const encrypted =
            ''
        const arr = decryptData(encrypted, key) as string[]
        if (_.isEmpty(input)) {
            reject(arr[0])
            return
        }
        setTimeout(() => {
            const lic = createSecret(createSecret(`${input}`, 0), 0)
            const code = generateAdminAuthCode()
            if (lic === code) {
                resolve(true)
            } else {
                reject(arr[1])
            }
        }, randomRange(1, 3) * 1000)
    })
}

export function createAppWording() {
    const key =
        '2187bdd8d43485ceb66210e23a20eac0e59cf3963c03621db6e87f2b1037c10d89ba9c32c8b2ffecd675387823dbe77a11b581c92c2d364f89f17dc933b775411698156717251'
    const encrypted =
        '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'
    const arr = decryptData(encrypted, key) as string[]
    return arr
}

export function generateRegisterQuestions() {
    const key =
        '2e2f8c2544c1fa599acdd80146584234079ca290dabdba2d00901eff776e7a0f61f20b56a4bd4dfc7666c00d9e5651741cc312203f7086ca83e199c0b04d30da1698154170182'
    const encrypted =
        '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'
    const arr = decryptData(encrypted, key) as any[]
    const qss = arr.map((item) => {
        if (item.name === 'password') {
            return {
                ...item,
                validate: validateAdmin,
            }
        }
        return item
    })
    return qss
}

export function generateCreateQuestions(appName: string) {
    const key =
        'd8dcc2cd3c189e2b3ec919c588b02de041cd0fcefd0f72e7469f5da47df667e85cfd47439cd63c59c17a2c6ba69f1ff1c4792683b002240d7d52b77dba2cd39e1698154393701'
    const encrypted =
        ''
    const arr = decryptData(encrypted, key) as any[]
    const qss = arr.map((item) => {
        if (item.name === 'name') {
            return {
                ...item,
                default: appName,
            }
        }
        if (item.name === 'lic') {
            return {
                ...item,
                validate: validateLicense,
            }
        }
        return item
    })
    return qss
}
